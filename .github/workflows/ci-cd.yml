name: CI/CD Pipeline (Disabled)

# Temporarily disabled for development
on:
  workflow_dispatch:  # Only manual trigger
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dooray-mcp-python

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check src/
        black --check src/
        isort --check-only src/

    - name: Run type checking
      run: |
        source .venv/bin/activate
        mypy src/

    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest --cov=dooray_mcp_server --cov-report=xml
      env:
        DOORAY_API_KEY: "test_api_key"
        DOORAY_BASE_URL: "https://api.dooray.com"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: dooray-mcp-python:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Test that the image builds and can start
        docker run --rm -d --name test-container \
          -e DOORAY_API_KEY="test_key" \
          -e DOORAY_BASE_URL="https://api.dooray.com" \
          -p 8080:8080 \
          dooray-mcp-python:test
        
        # Wait for container to start
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Cleanup
        docker stop test-container

  uvx-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Test uvx execution
      run: |
        # Test STDIO mode
        timeout 10s uvx --from . dooray-mcp-server --help || true
        
        # Test HTTP mode
        timeout 10s uvx --from . dooray-mcp-server-http --help || true
      env:
        DOORAY_API_KEY: "test_key"
        DOORAY_BASE_URL: "https://api.dooray.com"

  publish-docker:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker, uvx-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker, uvx-test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Build package
      run: |
        uv build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'