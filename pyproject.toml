[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dooray-mcp"
version = "0.1.0"
description = "Dooray MCP Server - Python implementation"
authors = [{name = "NHN", email = "dooray@nhn.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["mcp", "dooray", "model-context-protocol", "ai", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
]

dependencies = [
    "mcp>=1.0.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "aioresponses>=0.7.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# uvx 실행을 위한 스크립트 정의
[project.scripts]
dooray-mcp = "dooray_mcp.main:main"
dooray-mcp-stdio = "dooray_mcp.main:main_stdio"
dooray-mcp-http = "dooray_mcp.main:main_http"
dooray-mcp-sse = "dooray_mcp.main:main_sse"

# uvx 호환을 위한 entry points
[project.entry-points."mcp.servers"]
dooray = "dooray_mcp.main:create_server"

[project.urls]
Homepage = "https://github.com/sungmin-koo-ai/DoorayMCP"
Repository = "https://github.com/sungmin-koo-ai/DoorayMCP"
Issues = "https://github.com/sungmin-koo-ai/DoorayMCP/issues"
Documentation = "https://github.com/sungmin-koo-ai/DoorayMCP/blob/main/README.md"

# Hatchling build configuration
[tool.hatchling.build.targets.wheel]
packages = ["src/dooray_mcp"]

[tool.hatchling.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/README.md",
    "/pyproject.toml",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
extend-exclude = ["old/"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (may require API keys)",
    "stdio: marks tests for stdio transport",
    "http: marks tests for HTTP transport",
    "sse: marks tests for SSE transport",
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["old/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false